{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\leena\\\\Downloads\\\\Narudoro.1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\leena\\\\Downloads\\\\Narudoro.1\\\\src\\\\components\\\\Timer\\\\CountDown.jsx\";\n\nimport React, { useState, useRef, useEffect } from 'react';\n\nvar CountDown = function CountDown() {\n  // We need ref in this, because we are dealing\n  // with JS setInterval to keep track of it and\n  // stop it when needed\n  var Ref = useRef(null); // The state for our timer\n\n  var _useState = useState('00:00:00'),\n      _useState2 = _slicedToArray(_useState, 2),\n      timer = _useState2[0],\n      setTimer = _useState2[1];\n\n  var getTimeRemaining = function getTimeRemaining(e) {\n    var total = Date.parse(e) - Date.parse(new Date());\n    var seconds = Math.floor(total / 1000 % 60);\n    var minutes = Math.floor(total / 1000 / 60 % 60);\n    var hours = Math.floor(total / 1000 / 60 / 60 % 24);\n    return {\n      total: total,\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds\n    };\n  };\n\n  var startTimer = function startTimer(e) {\n    var _getTimeRemaining = getTimeRemaining(e),\n        total = _getTimeRemaining.total,\n        hours = _getTimeRemaining.hours,\n        minutes = _getTimeRemaining.minutes,\n        seconds = _getTimeRemaining.seconds;\n\n    if (total >= 0) {\n      // update the timer\n      // check if less than 10 then we need to \n      // add '0' at the beginning of the variable\n      setTimer((hours > 9 ? hours : '0' + hours) + ':' + (minutes > 9 ? minutes : '0' + minutes) + ':' + (seconds > 9 ? seconds : '0' + seconds));\n    }\n  };\n\n  var clearTimer = function clearTimer(e) {\n    // If you adjust it you should also need to\n    // adjust the Endtime formula we are about\n    // to code next    \n    setTimer('00:00:10'); // If you try to remove this line the \n    // updating of timer Variable will be\n    // after 1000ms or 1sec\n\n    if (Ref.current) clearInterval(Ref.current);\n    var id = setInterval(function () {\n      startTimer(e);\n    }, 1000);\n    Ref.current = id;\n  };\n\n  var getDeadTime = function getDeadTime() {\n    var deadline = new Date(); // This is where you need to adjust if \n    // you entend to add more time\n\n    deadline.setSeconds(deadline.getSeconds() + 10);\n    return deadline;\n  }; // We can use useEffect so that when the component\n  // mount the timer will start as soon as possible\n  // We put empty array to act as componentDid\n  // mount only\n\n\n  useEffect(function () {\n    clearTimer(getDeadTime());\n  }, []); // Another way to call the clearTimer() to start\n  // the countdown is via action event from the\n  // button first we create function to be called\n  // by the button\n\n  var onClickReset = function onClickReset() {\n    clearTimer(getDeadTime());\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, timer), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onClickReset,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, \"Reset\"));\n};\n\nexport default CountDown;","map":{"version":3,"names":["React","useState","useRef","useEffect","CountDown","Ref","timer","setTimer","getTimeRemaining","e","total","Date","parse","seconds","Math","floor","minutes","hours","startTimer","clearTimer","current","clearInterval","id","setInterval","getDeadTime","deadline","setSeconds","getSeconds","onClickReset"],"sources":["C:/Users/leena/Downloads/Narudoro.1/src/components/Timer/CountDown.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\r\n  \r\n  \r\nconst CountDown = () => {\r\n  \r\n    // We need ref in this, because we are dealing\r\n    // with JS setInterval to keep track of it and\r\n    // stop it when needed\r\n    const Ref = useRef(null);\r\n  \r\n    // The state for our timer\r\n    const [timer, setTimer] = useState('00:00:00');\r\n  \r\n  \r\n    const getTimeRemaining = (e) => {\r\n        const total = Date.parse(e) - Date.parse(new Date());\r\n        const seconds = Math.floor((total / 1000) % 60);\r\n        const minutes = Math.floor((total / 1000 / 60) % 60);\r\n        const hours = Math.floor((total / 1000 / 60 / 60) % 24);\r\n        return {\r\n            total, hours, minutes, seconds\r\n        };\r\n    }\r\n  \r\n  \r\n    const startTimer = (e) => {\r\n        let { total, hours, minutes, seconds } \r\n                    = getTimeRemaining(e);\r\n        if (total >= 0) {\r\n  \r\n            // update the timer\r\n            // check if less than 10 then we need to \r\n            // add '0' at the beginning of the variable\r\n            setTimer(\r\n                (hours > 9 ? hours : '0' + hours) + ':' +\r\n                (minutes > 9 ? minutes : '0' + minutes) + ':'\r\n                + (seconds > 9 ? seconds : '0' + seconds)\r\n            )\r\n        }\r\n    }\r\n  \r\n  \r\n    const clearTimer = (e) => {\r\n  \r\n        // If you adjust it you should also need to\r\n        // adjust the Endtime formula we are about\r\n        // to code next    \r\n        setTimer('00:00:10');\r\n  \r\n        // If you try to remove this line the \r\n        // updating of timer Variable will be\r\n        // after 1000ms or 1sec\r\n        if (Ref.current) clearInterval(Ref.current);\r\n        const id = setInterval(() => {\r\n            startTimer(e);\r\n        }, 1000)\r\n        Ref.current = id;\r\n    }\r\n  \r\n    const getDeadTime = () => {\r\n        let deadline = new Date();\r\n  \r\n        // This is where you need to adjust if \r\n        // you entend to add more time\r\n        deadline.setSeconds(deadline.getSeconds() + 10);\r\n        return deadline;\r\n    }\r\n  \r\n    // We can use useEffect so that when the component\r\n    // mount the timer will start as soon as possible\r\n  \r\n    // We put empty array to act as componentDid\r\n    // mount only\r\n    useEffect(() => {\r\n        clearTimer(getDeadTime());\r\n    }, []);\r\n  \r\n    // Another way to call the clearTimer() to start\r\n    // the countdown is via action event from the\r\n    // button first we create function to be called\r\n    // by the button\r\n    const onClickReset = () => {\r\n        clearTimer(getDeadTime());\r\n    }\r\n  \r\n    return (\r\n        <div className=\"App\">\r\n            <h2>{timer}</h2>\r\n            <button onClick={onClickReset}>Reset</button>\r\n        </div>\r\n    )\r\n}\r\n  \r\nexport default CountDown;"],"mappings":"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"},"metadata":{},"sourceType":"module"}